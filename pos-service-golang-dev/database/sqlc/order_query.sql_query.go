// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :execlastid
INSERT INTO
    ` + "`" + `order` + "`" + ` (
        shop_id,
        platform_id,
        remote_order_id,
        display_order_id,
        delivery_date_time,
        total_amount,
        sub_total,
        total_fee,
        campaign_code,
        discount,
        discount_type,
        vouchers,
        status,
        cancelled_reason,
        order_type_id,
        note,
        created_at,
        updated_at,
        customer_name,
        user_id,
        customer_id,
        delivery_location_id,
        shipping_method,
        shipping_total,
        shipping_tax,
        total_tax,
        cash_due,
        surcharge,
        contact_access_code,
        testing_order,
        cancelled_by_customer,
        payment_method,
        is_scheduled,
        is_table_order,
        tip,
        tip_percentage,
        table_id,
        table_order_method_id,
        device_platform,
        order_delayed,
        unique_order_id
    )
VALUES (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type CreateOrderParams struct {
	ShopID              int32          `json:"shopId"`
	DeliveryPlatformID  int32          `json:"deliveryPlatformId"`
	RemoteOrderID       string         `json:"remoteOrderId"`
	DisplayOrderID      string         `json:"displayOrderId"`
	DeliveryDateTime    time.Time      `json:"deliveryDateTime"`
	TotalAmount         int32          `json:"totalAmount"`
	SubTotal            int32          `json:"subTotal"`
	TotalFee            sql.NullInt32  `json:"totalFee"`
	CampaignCode        sql.NullString `json:"campaignCode"`
	Discount            int32          `json:"discount"`
	DiscountType        sql.NullString `json:"discountType"`
	Vouchers            sql.NullString `json:"vouchers"`
	Status              string         `json:"status"`
	CancelledReason     sql.NullString `json:"cancelledReason"`
	OrderTypeID         int32          `json:"orderTypeId"`
	Note                sql.NullString `json:"note"`
	CreatedAt           sql.NullTime   `json:"createdAt"`
	UpdatedAt           sql.NullTime   `json:"updatedAt"`
	CustomerName        string         `json:"customerName"`
	UserID              int32          `json:"userId"`
	CustomerID          int32          `json:"customerId"`
	DeliveryLocationID  sql.NullInt32  `json:"deliveryLocationId"`
	ShippingMethod      string         `json:"shippingMethod"`
	ShippingTotal       sql.NullString `json:"shippingTotal"`
	ShippingTax         sql.NullString `json:"shippingTax"`
	TotalTax            sql.NullString `json:"totalTax"`
	CashDue             string         `json:"cashDue"`
	Surcharge           string         `json:"surcharge"`
	ContactAccessCode   sql.NullString `json:"contactAccessCode"`
	TestingOrder        bool           `json:"testingOrder"`
	CancelledByCustomer bool           `json:"cancelledByCustomer"`
	PaymentMethod       string         `json:"paymentMethod"`
	IsScheduled         bool           `json:"isScheduled"`
	IsTableOrder        bool           `json:"isTableOrder"`
	Tip                 string         `json:"tip"`
	TipPercentage       string         `json:"tipPercentage"`
	TableID             sql.NullString `json:"tableId"`
	TableOrderMethodID  sql.NullInt32  `json:"tableOrderMethodId"`
	DevicePlatform      string         `json:"devicePlatform"`
	OrderDelayed        bool           `json:"orderDelayed"`
	UniqueOrderID       sql.NullString `json:"uniqueOrderId"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg *CreateOrderParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createOrder,
		arg.ShopID,
		arg.DeliveryPlatformID,
		arg.RemoteOrderID,
		arg.DisplayOrderID,
		arg.DeliveryDateTime,
		arg.TotalAmount,
		arg.SubTotal,
		arg.TotalFee,
		arg.CampaignCode,
		arg.Discount,
		arg.DiscountType,
		arg.Vouchers,
		arg.Status,
		arg.CancelledReason,
		arg.OrderTypeID,
		arg.Note,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CustomerName,
		arg.UserID,
		arg.CustomerID,
		arg.DeliveryLocationID,
		arg.ShippingMethod,
		arg.ShippingTotal,
		arg.ShippingTax,
		arg.TotalTax,
		arg.CashDue,
		arg.Surcharge,
		arg.ContactAccessCode,
		arg.TestingOrder,
		arg.CancelledByCustomer,
		arg.PaymentMethod,
		arg.IsScheduled,
		arg.IsTableOrder,
		arg.Tip,
		arg.TipPercentage,
		arg.TableID,
		arg.TableOrderMethodID,
		arg.DevicePlatform,
		arg.OrderDelayed,
		arg.UniqueOrderID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getOrders = `-- name: GetOrders :many
SELECT id, shop_id, platform_id, remote_order_id, display_order_id, delivery_date_time, total_amount, sub_total, total_fee, campaign_code, discount, discount_type, vouchers, status, cancelled_reason, order_type_id, note, created_at, updated_at, customer_id, customer_name, user_id, delivery_location_id, shipping_method, shipping_total, shipping_tax, total_tax, cash_due, surcharge, contact_access_code, testing_order, cancelled_by_customer, payment_method, is_scheduled, is_table_order, tip, tip_percentage, table_id, table_order_method_id, device_platform, order_delayed, unique_order_id FROM ` + "`" + `order` + "`" + ` WHERE order_type_id = 4 LIMIT ? OFFSET ?
`

type GetOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetOrders(ctx context.Context, arg *GetOrdersParams) ([]*Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.PlatformID,
			&i.RemoteOrderID,
			&i.DisplayOrderID,
			&i.DeliveryDateTime,
			&i.TotalAmount,
			&i.SubTotal,
			&i.TotalFee,
			&i.CampaignCode,
			&i.Discount,
			&i.DiscountType,
			&i.Vouchers,
			&i.Status,
			&i.CancelledReason,
			&i.OrderTypeID,
			&i.Note,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CustomerID,
			&i.CustomerName,
			&i.UserID,
			&i.DeliveryLocationID,
			&i.ShippingMethod,
			&i.ShippingTotal,
			&i.ShippingTax,
			&i.TotalTax,
			&i.CashDue,
			&i.Surcharge,
			&i.ContactAccessCode,
			&i.TestingOrder,
			&i.CancelledByCustomer,
			&i.PaymentMethod,
			&i.IsScheduled,
			&i.IsTableOrder,
			&i.Tip,
			&i.TipPercentage,
			&i.TableID,
			&i.TableOrderMethodID,
			&i.DevicePlatform,
			&i.OrderDelayed,
			&i.UniqueOrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE ` + "`" + `order` + "`" + ` SET status = ? WHERE id = ?
`

type UpdateOrderStatusParams struct {
	Status string `json:"status"`
	ID     uint64 `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg *UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}
